#! python
import os
import sys
import json

# Required to work with Python 2 and 3.
if sys.version_info.major == 3:
    unicode = str
else:
    pass


STATA_MODEL_COMMENT = '''//
// Header with configuration for model:
//    {}
//
// Automatically generated by Waf, do not change!
//
// Adjust model parameters in:
//    {}
//\n\n\n'''

def convert_model_json_to_stata(task): 
    """Convert a JSON model specification in ``source[0]`` to a Stata
    do-file, storing dictionary entries in globals.

    Require the JSON file to contain a single, non-nested, dictionary.

    Simply write its entries as Stata globals to the target file.

    """

    model_pars = json.load(open(task.inputs[0].abspath()))
    model_name = os.path.splitext(task.inputs[0].name)[0]

    tgt_content = STATA_MODEL_COMMENT.format(
        model_name, task.inputs[0].abspath()
    )
    for key, val in sorted(model_pars.items()):
        # Adjust for Stata string notation
        if isinstance(val, (str, unicode)):
            val = '"{}"'.format(val)
        tgt_content += 'global {k} = {v}\n'.format(k=key, v=val)
    return task.outputs[0].write(tgt_content)


def build(ctx):

    to_convert = [
        'control'
    ]

    for trunk in to_convert:
        ctx(
            rule=convert_model_json_to_stata,
            source='{}.json'.format(trunk),
            target='{}.do'.format(trunk),
        )


def build(ctx):
    # ctx.recurse('documentation')
    # ctx.recurse('model_specs')
    # Adding the build group is required because the project
    # paths have to be generated first. It should not entail
    # any performance penalties -- all tasks before this
    # point generally run very fast.
    ctx.add_group()
    ctx.recurse('data_management')
    ctx.recurse('analysis')
    # ctx.recurse('final')
    # Safety measure -- else the LaTeX scanner might fail because some
    # '.tex'-source file has not been generated.
    ctx.add_group()
    ctx.recurse('paper')
